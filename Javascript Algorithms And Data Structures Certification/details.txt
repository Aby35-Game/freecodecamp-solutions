
							Basic Javascript (ES5)

1) Variables which are used without the var keyword are automatically created in the global scope.
2) Variables can contain alphabets,number $ and _ but cannot start with a number.
3) js objects can contain number and strings and if it's single word or number quotes("") are not mandatory.
4) . and [] notation to access objects properties.
	Cases where bracket notation rescues us
	a) when the property is created or added on the fly and not been defined in the first assignment.
	b) when the key contains space 
	c) The key name is stored in a variable.
5) jsonObj.hasOwnProperty check in javascript object whether such key is presenet or not in object.
6) Math.random() generate a floating number between 0 and 1 excluding 1.
   Math.floor is used to round off a number to nearest whole number
	Math.floor(Math.random()*10) will generate single digit integer number between 0 and 10 (10 is exclusive)
	Math.floor((Math.random()*(max-min+1))+min); will generate a random number between min and max (inclusive both).
7) The parseInt() function parses a string and returns an integer. It takes a second argument for the radix, which specifies the base of the 	number in the string. The radix can be an integer between 2 and 36.
    
   The function call looks like:
   parseInt(string, radix);
   Number.isInteger(numVariable); will return boolean 

							
							ES6

1) ECMAScript is a standardized version of JavaScript with the goal of unifying the language's specifications and features. As all major browsers and JavaScript-runtimes follow this specification, the term ECMAScript is interchangeable with the term JavaScript.

2) let camper = 'James';
   let camper = 'David'; // throws an error
	while with var there is no error generated
3) Note the "use strict". This enables Strict Mode, which catches common coding mistakes and "unsafe" actions. For instance:

"use strict";
x = 3.14; // throws an error because x is not declared

4) 	var printNumTwo;
	for (var i = 0; i < 3; i++) {
	  if(i === 2){
	    printNumTwo = function() {
	      return i;
	    };
	  }
	}
	console.log(printNumTwo()); // Output: 3
	console.log(i);		    // 3

	var printNumTwo;
	for (let i = 0; i < 3; i++) {
	  if(i === 2){
	    printNumTwo = function() {
	      return i;
	    };
	  }
	}
	console.log(printNumTwo()); // Output: 2

5) const FAV_PET , const acts as let except it cannot be updated and is read.
	all uppercase letters for declaration.
	console.log(i);		    // undefined
	"use strict";
	const s = [5, 6, 7];
	s = [1, 2, 3]; // throws error, trying to assign a const
	s[2] = 45; // works just as it would with an array declared with var or let
	console.log(s); // returns [5, 6, 45]
6)	To fetch present time and date 	 
	new Date();

7) concat(arr1, arr2) function 
	 "use strict";
	const myConcat = (arr1, arr2) => arr1.concat(arr2);

	// test your code
	console.log(myConcat([1, 2], [3, 4, 5]));

8) filter(), map(), reduce()
	
	var words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];
	const result = words.filter(word => word.length > 6);
	console.log(result);	// expected output: Array ["exuberant", "destruction", "present"]

	var array1 = [1, 4, 9, 16];
	// pass a function to map
	const map1 = array1.map(x => x * 2);
	console.log(map1);	// expected output: Array [2, 8, 18, 32]

	const array1 = [1, 2, 3, 4];
	const reducer = (accumulator, currentValue) => accumulator + currentValue;
	// 1 + 2 + 3 + 4
	console.log(array1.reduce(reducer));	// expected output: 10
	// 5 + 1 + 2 + 3 + 4
	console.log(array1.reduce(reducer, 5));	// expected output: 15

	NOTE: all 3 functions mentioned in this point does not alter the original array.

9) Setting default parameter for your function
	function greeting(name = "Anonymous") {
	  return "Hello " + name;
	}
	console.log(greeting("John")); // Hello John
	console.log(greeting()); // Hello Anonymous

10) Rest operator
	function sum(...args){
		console.log(`you have passed {args.length} parameters`)
	} 

11) Spread operator
	arr2 = [1,2,...arr1]; will copy all elements of arr1 in arr2

	To find max or min element in array
	Math.max(...arr);
	Math.min(...arr);

12) Destructing object
	const LOCAL_FORECAST = {
	  today:    { min: 72, max: 83 },
	  tomorrow: { min: 73.3, max: 84.6 }
	};

	const {tomorrow: {max: maxOfTomorrow}} = forecast;  // 84.6
13) const [a, b,,, c] = [1, 2, 3, 4, 5, 6];
    console.log(a, b, c); // 1, 2, 5

14) Destructing Array
	const list = [1,2,3,4,5,6,7,8,9,10];
	ES 6
	const [a,b,...arr]=list;	// arr=[3,4,5,6,7,8,9,10] no change in list
	 
	ES 5 methods
	//indexing works similar to  .substring method in java (startIndex, lastIndex+1)	 for slice
	arr=list.slice(2,10); or arr=list.slice(2); //arr =[3,4,5,6,7,8,9,10] list will not be affected	
	
	splice will remove element from original array and 2 represent starting index 4 represent present + next 3 index to be cut out
	const arr=list.splice(2,4);	// arr= [3,4,5,6] ,list=[1,2,7,8,9,10]

15) Destructuring Assignment to Pass an Object as a Function's Parameters
	profileData={
		name:"Anuj",
		age: 29,
		nationality: "Indian"
		location: "Mumbai"
	}
	
	const profileUpdate = (profileData) => {
		 const { name, age, nationality, location } = profileData;
		  // do something with these variables
	}
		can also be coded as

	const profileUpdate = ({ name, age, nationality, location }) => {
	  /* do something with these fields */
	}
	only ({name}) is also valid if we just want one parameter
16) Template Literal
	`hello ${arr[0]}
	 this will appear in next line`
17) Pass arguments to function and return an object
	"use strict";
	const createPerson = (name, age, gender) => ({name,age,gender});
	console.log(createPerson("Zodiac Hasbro", 56, "male")); // returns a proper object

	NOTE: use () around the object in function body as when the one line function generally does not need a return statement in es6
	but for object creation and return we need to wrap one line block around () brackets.
18) When defining functions within objects in ES5, we have to use the keyword function as follows:

	const person = {
	  name: "Taylor",
	  sayHello: function() {
	    return `Hello! My name is ${this.name}.`;
	  }
	};
	With ES6, You can remove the function keyword and colon altogether when defining functions in objects. Here's an example of this 	 syntax:

	const person = {
	  name: "Taylor",
	  sayHello() {
	    return `Hello! My name is ${this.name}.`;
	  }
	}; 
19)	In ES5, we usually define a constructor function, and use the new keyword to instantiate an object.
	Note: We recognize a function is contructor if it starts with Capital letter.
	var SpaceShuttle = function(targetPlanet){
	  this.targetPlanet = targetPlanet;
	}
	var zeus = new SpaceShuttle('Jupiter');

	The class syntax simply replaces the constructor function creation:

	class SpaceShuttle {
	  constructor(targetPlanet){
	    this.targetPlanet = targetPlanet;
	  }
	}
	const zeus = new SpaceShuttle('Jupiter');

	the keyword class is just syntactic sugar

20)	class Book {
	  constructor(author) {
	    this._author = author;
	  }
	  // getter
	  get writer(){
	    return this._author;
	  }
	  // setter
	  set writer(updatedAuthor){
	    this._author = updatedAuthor;
	  }
	}
	const lol = new Book('anonymous');
	console.log(lol.writer);  // anonymous
	lol.writer = 'wut';
	console.log(lol.writer);  // wut
	Notice the syntax we are using to invoke the getter and setter - as if they are not even functions.

	Getters and setters are important, because they hide internal implementation details.

21)	In the past, the function require() would be used to import the functions and code in external files and modules. While handy, this 		presents a problem: some files and modules are rather large, and you may only need certain code from those external resources.

	ES6 gives us a very handy tool known as import. With it, we can choose which parts of a module or file to load into a given file, 		saving time and memory.
	import { countItems } from "math_array_functions"
	The whitespace surrounding the function inside the curly braces is a best practice - it makes it easier to read the import statement
	countItems can either be a function or variable.

	In most cases, the file path requires a ./ before it; otherwise, node will look in the node_modules directory first trying to load it 		as a dependency.

22) 	const capitalizeString = (string) => {
	  return string.charAt(0).toUpperCase() + string.slice(1);
	}
	export { capitalizeString } //How to export functions.
	export const foo = "bar"; //How to export variables.

	or you can also export all variables in same line
23) To import all contents of files
	import * as myMathModule from "math_functions";
	myMathModule.add(2,3);
	myMathModule.subtract(5,3);


							Regular Expressions


1) Regex are written between // and should not be placed in quotes (both single or double)
	The .test() method takes the regex, applies it to a string (which is placed inside the parentheses), and returns true or false if your 		pattern finds something or not.
	test() returns true or false
	
	let testStr = "freeCodeCamp";
	let testRegex = /Code/;
	testRegex.test(testStr);
	// Returns true

2) OR for words and ignoring case	
	/dog|cat|bird|fish/ 	"OR" search in regexp
	/regexpcharacters/i	for ignoring case

3) .match is other way of matching a regexp
	
	match() returns extracted word if we searcg /coding/i then if there is CoDiNG present it will return that string
	checkingString.match(regExp); this will extrach the pattern

	use /code/g with match()  to get all multiple matchings
	and /code/gi 	for using two flags together i for ignoring case and g for multiple matches

4) "." wild card operator 
	let humStr = "I'll hum a song";
	let hugStr = "Bear hug";
	let huRegex = /hu./;
	humStr.match(huRegex); // Returns ["hum"]
	hugStr.match(huRegex); // Returns ["hug"]

5) OR for characters and g global flag
	/h[aeiou]m/ will search for either h_m as _ can either have any mentioned vowel
	/[a-e]/ig will search for characters between a-e 
	/[h-s2-6]/ig	 will match h to s characters or 2,3,4,5,6 numbers as an or
	
6) Caret operator or NOT INCLUDING (inside [])
	/[^aeiou0-9]/ig		will exclude all vowels and all numbers
	
7) Search starting pattern  with Caret operator	
	Earlier, you used the caret character (^) inside a character set to create a negated character set in the 
	form [^thingsThatWillNotBeMatched]. Outside of a character set, the caret is used to search for patterns at the beginning of strings.
	let firstString = "Ricky is first and can be found.";
	let firstRegex = /^Ricky/;
	firstRegex.test(firstString);
	// Returns true
	
8) Search ending pattern with $ operator	
	let caboose = "The last car on a train is the caboose";
	let lastRegex = /caboose$/; // Change this line
	let result = lastRegex.test(caboose);
	console.log(result);
8) 1 or more than one character , 0 or more than 0 character
	/s+/ig	 		will give all matching of 1 or more than 1 s together
	/[Aa]*/			for 0 or more than 0 A or a   /h[a*]s/ig	has,hAs,hAas
	/h[a-i]*s/ig;		has,HaS,hAaS,his
9) Greedy (default) vs lazy search
	let text = "<h1>Winter is coming</h1>";

	let myRegex = /<h.*1>/;  		//result=<h1>Winter is coming</h1>    // Default GREEDY search	
	let myRegex = /<h.*?1>/; 		//result=<h1>			      // ? LAZY search (? should come afterwards not before *)
	
	let result = text.match(myRegex);
10) \w alphanumeric class shortcut and not alphanumeric \W (capital W)
	The closest character class in JavaScript to match the alphabet is \w. This shortcut is equal to [A-Za-z0-9_]
	Note: _ (underscore) is also present
	
	\W will find all other characters such as . and " " space 

	\d  is shortcut for [0-9]
	\D  is shortcut for [^0-9]
11) \s Searching Whitespces, tabs and carriages and \S for non-white spaces
	You can search for whitespace using \s, which is a lowercase s. This pattern not only matches whitespace, but also carriage return, 		tab, form feed, and new line characters. You can think of it as similar to the character class [ \r\t\f\n\v].	

	\s for white spaces 
	\S for non-space characters

12) /ha{3-5}s/i Specify lower and upper number for repetitions of a character
	let A4 = "aaaah";
	let A2 = "aah";
	let multipleA = /a{3,5}h/;
	multipleA.test(A4); // Returns true
	multipleA.test(A2); // Returns false

    For ower number of repetition of characters
	let haStr = "Hazzzzah";
	let haRegex = /haz{4,}ah/i; // Change this line
	let result = haRegex.test(haStr);

    For minimum number of repetiton of a character
	use /ha{100}s/	for exact 100 a's

13) repeat function	 (Not part of Regex)
	let timStr =  "h" + "a".repeat(100) + "h";
	will create a string haaaaaa_______________________________aaaaaaaaas
	100 times a

14) optional character using ? (another use of ?)
	let favWord = "favorite";
	let favRegex = /favou?rite/; 
	let result = favRegex.test(favWord);	// true

15) ?= & ?! (positive and negative lookahead)
	positive lookahead
	let pwRegex = /(?=\w{6,})(?=\D*\d\d\D*)/i; 
	this will match that a password or string should have 6 or more alphanumeric characters and out
	of all	there should be 2 consecutive digits
	
	negative lookahead
	?! is its representation and is just opposite of ?= (positive lookahead)
16) replace to replace a regexp by new word or text	
	let huhText = "This sandwich is good.";
	let fixRegex = /good/; // Change this line
	let replaceText = "okey-dokey"; // Change this line
	let result = huhText.replace(fixRegex,replaceText);

								Basic Data Structures

1) Arrays are mutable in JS, arr.length returns the no of elements in array, JS array can contain items of different Data type elements.
2) 
	arr.push(2);		// push() adds element in end of array
	arr.unshift(2);		// unshift() adds element in start of array
	arr.pop();		// pop() removes element in end of array
	arr.shift();		// shift() removes element in start of array
3) splice()
	let array = ['I', 'am', 'feeling', 'really', 'happy'];

	let newArray = array.splice(3, 2);
	// newArray equals ['really', 'happy']
	// array equals ['I', 'am', 'feeling']
4) slice()
	let arrayData = ['I', 'am', 'feeling', 'really', 'happy'];
	arr=arrayData.slice(3,5); or arr=arrayData.slice(3); 
	//arr =['really', 'happy']
	// arrayData = ['I', 'am', 'feeling', 'really', 'happy'];
	arrayData will not be affected	
5) indexOf() 	
	let fruits = ['apples', 'pears', 'oranges', 'peaches', 'pears'];

	fruits.indexOf('dates') // returns -1
	fruits.indexOf('oranges') // returns 2

	fruits.indexOf('pears') // returns 1, the first index at which the element exists
6) 	Objects are nothing but key value pairs data
7) hasOwnProperty()
	users.hasOwnProperty('Alan');
	'Alan' in users;
	// both return true
8)	
	for (let user in users) {
	  console.log(user);
	};

	// logs: Alan Jeff Sarah Ryan
	Objects do not maintain an ordering to stored keys like arrays do; thus a keys position on an object, or the relative order in which 		it appears, is irrelevant when referencing or accessing that key
9) Object.keys()
 
	Object.keys() method and passing in an object as the argument. This will return an array with strings representing each property in 		the object. Again, there will be no specific order to the entries in the array.
10) use combination of . [] (dot & bracket) notation along with for in loop and push to alter an object's value.

						

							Basic Algorithm Scripting


1) string to array and applying logic on each element
	var str = 'The quick brown fox jumps over the lazy dog.';

	var words = str.split(' ');
	console.log(words[3]);

	console.log(Array.from('foo'));
	// expected output: Array ["f", "o", "o"]

	console.log(Array.from([1, 2, 3], x => x + x));
	// expected output: Array [2, 4, 6]

	str.substring(startIndex, lastIndex+1);

2) to reverse a string	
	stringVal.split('') will split the string into array elements
	arr.reverse();		will reverse the value of array [1,2,3] becomes [3,2,1]
	arr.join('');		will unite a array elements into a new string
4) arr.find(functionName) (without () call)
	both functions will find and return first element that satisfies functions condition or else will return undefined.
	const findElement=(arr, func) =>  arr.find(func);
	const findElement=(arr, func) => arr.map(func).indexOf(true)>-1 ?arr[arr.map(func).indexOf(true)] :undefined;

	console.log(findElement([1, 20, 3, 5], num => num % 5 === 0));

	We can search a element in array using indexOf() if indexOf() returns > -1 then items exist

	
5) Capitalize a sentence	
	toUpperCase()
	toLowerCase()
	
	const titleCase=(str) => str.split(' ').map(x=> x.charAt(0).toUpperCase()+x.substring(1).toLowerCase()).join(' ');
	const titleCase=(str) => str.toLowerCase().replace(/(^|\s)\w/g, (L)=> L.toUpperCase());

6) truthy and falsy values
	All the values in JS are truthy except 6 values.
	Only 6 falsy values are:-
	a) undefined 
	b) null
	c) NaN 
	d) false
	e) 0
	f) ""	
	arr.filter(Boolean);
	to filter all the boolean type values in hs array
